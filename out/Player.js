// Generated by CoffeeScript 1.6.3
(function() {
  var Player, keystatus, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  window.VAS || (window.VAS = {});

  keystatus = {};

  window.VAS.Player = Player = (function(_super) {
    __extends(Player, _super);

    function Player(preload) {
      var playerSpriteSheet;
      playerSpriteSheet = new createjs.SpriteSheet({
        images: [preload.getResult('player-walk-anim'), preload.getResult('player-jump')],
        frames: {
          width: 72,
          height: 97,
          regX: 36,
          regY: 0
        },
        animations: {
          walk: [0, 10],
          jump: 15
        }
      });
      createjs.SpriteSheetUtils.addFlippedFrames(playerSpriteSheet, true, false, false);
      this.init(playerSpriteSheet);
      keystatus = root.keystatus;
    }

    Player.prototype.init = function(playerSpriteSheet) {
      this.initialize(playerSpriteSheet);
      this.width = this.spriteSheet.getFrame(0).rect.width;
      this.height = this.spriteSheet.getFrame(0).rect.height;
      this.regX = -36;
      this.regY = 0;
      this.jumpVel = -675;
      this.moveSpeed = 250;
      this.facingRight = true;
      this.isJumping = true;
      this.isBopped = false;
      this.coins = 0;
      this.collideRect = {
        x: 14,
        y: 0,
        width: 44,
        height: this.height
      };
      return this.gotoAndStop(this.facingRight ? 'walk' : 'walk_h');
    };

    Player.prototype.update = function(delta) {
      if (this.isBopped) {
        return;
      }
      if (keystatus.jumpDown && this.canJump()) {
        this.jump();
      }
      if (this.isJumping) {
        this.gotoAndStop(this.facingRight ? 'jump' : 'jump_h');
      }
      if (keystatus.leftDown && !keystatus.rightDown) {
        this.facingRight = false;
        this.x -= this.moveSpeed * delta;
        if ((this.paused || this.currentAnimation === !'walk_h') && !this.isJumping) {
          return this.gotoAndPlay('walk_h');
        }
      } else if (keystatus.rightDown && !keystatus.leftDown) {
        this.facingRight = true;
        this.x += this.moveSpeed * delta;
        if ((this.paused || this.currentAnimation === !'walk') && !this.isJumping) {
          return this.gotoAndPlay('walk');
        }
      } else {
        if (!this.isJumping) {
          return this.gotoAndStop(this.facingRight ? 'walk' : 'walk_h');
        }
      }
    };

    Player.prototype.collideGround = function() {
      this.isJumping = false;
      if (this.isBopped) {
        this.vX = 0;
      }
      return this.isBopped = false;
    };

    Player.prototype.canJump = function() {
      return !this.isJumping && this.vY === 0;
    };

    Player.prototype.jump = function() {
      this.vY = this.jumpVel;
      return this.isJumping = true;
    };

    Player.prototype.bop = function(facingRight) {
      this.facingRight = facingRight;
      this.isBopped = true;
      this.isJumping = true;
      this.vY = -250;
      return this.vX = 350 * (this.facingRight ? 1 : -1);
    };

    Player.prototype.resetStates = function() {
      this.isJumping = this.facingRight = true;
      this.isBopped = this.nogravity = this.isDead = false;
      this.vX = this.vY = 0;
      return this.gotoAndStop(this.facingRight ? 'walk' : 'walk_h');
    };

    return Player;

  })(createjs.BitmapAnimation);

}).call(this);

/*
//@ sourceMappingURL=Player.map
*/
